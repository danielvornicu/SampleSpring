<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <context:component-scan base-package="tech.dev.dao tech.dev.service" />

    <jdbc:embedded-database id="dataSource" database-name="crm" type="H2">
        <jdbc:script location="classpath:db/createTables.sql"/>
        <jdbc:script location="classpath:db/insertData.sql"/>
    </jdbc:embedded-database>


    <!--<bean class="tech.dev.dao.ClientJdbcDAO">-->
        <!--<constructor-arg ref="datasource"/>-->
    <!--</bean>-->

    <!-- Le template est Thread-safe et peut donc être unique à travers tous les DAOs -->
    <!--<bean id="jdbcTemplate" scope="singleton" class="org.springframework.jdbc.core.JdbcTemplate">-->
        <!--<constructor-arg ref="datasource" />-->
    <!--</bean>-->

    <!-- avec LocalContainerEntityManagerFactoryBean est plus puisant -->
    <bean id="levrai" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="persistenceProvider">
            <bean class="org.hibernate.jpa.HibernatePersistenceProvider" />
        </property>
    </bean>

    <!-- alternative proposant moins de fonctionnalité (notamment absence d'injection de DataSource) -->
    <!-- nécessite l'existence des <properties> dans persistence.xml -->

    <!--   <bean id="myEmf" class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean">
           <property name="persistenceUnitName" value="crm-pu"/>
       </bean>-->


    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- Ce transaction manager suffirait pour des DAO JDBC seuls -->
    <!--    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="dataSource"/>
        </bean>-->
    <!-- Ce transaction manager permet de combiner DAO JPA et JDBC -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="levrai"/>
        <!-- possible de rendre explicites les éléments de configuration -->
        <!-- surtout en l'absence d'unicité (ex. plusieurs contextes JPA / DataSource -->
    </bean>

    <!-- Pour la gestion du cache -->
    <cache:annotation-driven/>
    <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" name="clients"/>
                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" name="client"/>
            </set>
        </property>
    </bean>

    <!-- Pour la gestion de la securité -->
    <sec:global-method-security pre-post-annotations="enabled" />

    <sec:http auto-config="true">
        <sec:intercept-url pattern="/spring-mvc/admin/**"
                           access="hasRole('ROLE_ADMIN')" />
        <sec:intercept-url pattern="/spring-mvc/**"
                           access="permitAll" />
        <sec:logout />
    </sec:http>

    <sec:authentication-manager>
        <sec:authentication-provider>
            <sec:user-service>
                <sec:user name="user1" password="mdp" authorities="ROLE_USER, ROLE_ADMIN" />
                <sec:user name="user2" password="mdp" authorities="ROLE_USER" />
                <sec:user name="dv"   password="mdp" authorities="ROLE_ADMIN" />
                <sec:user name="eric" password="mdp" authorities="ROLE_USER, ROLE_ADMIN" />
            </sec:user-service>
        </sec:authentication-provider>
    </sec:authentication-manager>

    <!--<sec:authentication-manager>-->
        <!--<sec:authentication-provider>-->
            <!--<sec:jdbc-user-service-->
                    <!--data-source-ref="dataSource" />-->
        <!--</sec:authentication-provider>-->
    <!--</sec:authentication-manager>-->


</beans>